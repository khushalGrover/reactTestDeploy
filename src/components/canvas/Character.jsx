/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./public/character/ALlAnim2.gltf 
*/

import React, { useRef } from 'react'
import { Canvas } from '@react-three/fiber'
import { useGLTF, useAnimations, OrbitControls } from '@react-three/drei'
// import { CharacterCanvas } from '.'

const Character = (props) => {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('./character/ALlAnim2.gltf')
  const { actions } = useAnimations(animations, group)
  return (

    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Rig" position={[-16.847, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Circle012" geometry={nodes.Circle012.geometry} material={nodes.Circle012.material} skeleton={nodes.Circle012.skeleton} />
          <skinnedMesh name="Circle013" geometry={nodes.Circle013.geometry} material={materials['Material.037']} skeleton={nodes.Circle013.skeleton} />
          <skinnedMesh name="Cube033" geometry={nodes.Cube033.geometry} material={materials['Material.036']} skeleton={nodes.Cube033.skeleton} />
          <skinnedMesh name="Cube034" geometry={nodes.Cube034.geometry} material={materials['Material.036']} skeleton={nodes.Cube034.skeleton} />
          <group name="Cube035">
            <skinnedMesh name="Cube020" geometry={nodes.Cube020.geometry} material={materials['Material.031']} skeleton={nodes.Cube020.skeleton} />
            <skinnedMesh name="Cube020_1" geometry={nodes.Cube020_1.geometry} material={materials['Material.032']} skeleton={nodes.Cube020_1.skeleton} />
          </group>
          <group name="Cube037">
            <skinnedMesh name="Cube019" geometry={nodes.Cube019.geometry} material={materials['Skin.012']} skeleton={nodes.Cube019.skeleton} />
            <skinnedMesh name="Cube019_1" geometry={nodes.Cube019_1.geometry} material={materials['Material.034']} skeleton={nodes.Cube019_1.skeleton} />
            <skinnedMesh name="Cube019_2" geometry={nodes.Cube019_2.geometry} material={materials['Material.035']} skeleton={nodes.Cube019_2.skeleton} />
            <skinnedMesh name="Cube019_3" geometry={nodes.Cube019_3.geometry} material={materials['Material.033']} skeleton={nodes.Cube019_3.skeleton} />
          </group>
          <group name="Cube038">
            <skinnedMesh name="Cube023" geometry={nodes.Cube023.geometry} material={materials['Skin.012']} skeleton={nodes.Cube023.skeleton} />
            <skinnedMesh name="Cube023_1" geometry={nodes.Cube023_1.geometry} material={materials['Skin.013']} skeleton={nodes.Cube023_1.skeleton} />
          </group>
          <skinnedMesh name="Plane007" geometry={nodes.Plane007.geometry} material={materials['Material.030']} skeleton={nodes.Plane007.skeleton} />
        </group>
      </group>
    </group>
  )
}




const CharacterCanvas = () => {
    <Canvas camera={{position:[80, 0, -200], fov: 50}} shadows>
      <OrbitControls />
      <ambientLight />
      <directionalLight
        position={[-5, 5, 5]}
        castShadow
        shadow-mapSize-width={1024}
        shadow-mapSize-height={1024}
      />
      <group position={[0, -1, 0]}>
        
        <Character />
      </group>
      <mesh
        rotation={[-0.5 * Math.PI, 0, 0]}
        position={[0, -1, 0]}
        receiveShadow
      >
        <planeBufferGeometry args={[10, 10, 1, 1]} />
        <shadowMaterial transparent opacity={0.2} />
      </mesh>
    </Canvas>

}

export default CharacterCanvas;

useGLTF.preload('./character/ALlAnim2.gltf')
